/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AClassDeclsProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AMultClassDeclClassDecls */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ASingleClassDeclClassDecls */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AEmptyClassDeclClassDecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AClassDeclClassDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AClassHdrClassHdr */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AMultMemberDeclMemberDecls */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce ASingleMemberDeclMemberDecls */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AFieldMember */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce AMethodMember */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ANoMemberMember */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AFieldDeclField */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AFieldDeclAndInitField */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AArrDeclField */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce ABoolTypeType */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce ACharTypeType */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AFloatTypeType */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AIntTypeType */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AStringTypeType */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AMethodDeclMethod */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce ANoParamMethodDeclMethod */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AMethodHdrDeclVoidMethodHdr */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce AMethodHdrDeclMethodHdr */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list, false);
            }
            break;
            case 23: /* reduce AMultFormalFormals */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce ASingleFormalFormals */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce AFormalDeclFormal */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AArrFormalDeclFormal */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce ABlockDeclBlock */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list, false);
            }
            break;
            case 28: /* reduce AEmptyBlockBlock */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce AMultStmtStmts */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AStmtStmts */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce ASimpleStmtStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AIfElseStmtStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AConditionCondition */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce ALocalDeclSimpleStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list, false);
            }
            break;
            case 35: /* reduce AAssignmentSimpleStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce AMethodCallSimpleStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AReturnVoidSimpleStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AReturnExprSimpleStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce ABlockSimpleStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AWhileLoopSimpleStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce ADoWhileLoopSimpleStmt */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce ANoStatementSimpleStmt */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce AVarDeclLocalDecl */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce AVarDeclAndInitLocalDecl */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AArrDeclLocalDecl */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AFieldSelfFieldAccess */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AFieldDotAccessFieldAccess */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce AArrayRefFieldAccess */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AIdentifierArrayRefArrayRef */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce AArrayDotRefArrayRef */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce AMethodCallNoArgMethodCall */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce AMethodCallWithArgMethodCall */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce AMethodCallWithDotOperNoArgMethodCall */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce AMethodCallWithDotOperAndArgMethodCall */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce AMultArgArgs */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, false);
            }
            break;
            case 56: /* reduce ASingleArgArgs */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
            case 57: /* reduce AExprAndLogicalExprExpr */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list, false);
            }
            break;
            case 58: /* reduce AExprOrLogicalExprExpr */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list, false);
            }
            break;
            case 59: /* reduce ALogicalExprExpr */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, false);
            }
            break;
            case 60: /* reduce ALessThanLogicalExpr */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list, false);
            }
            break;
            case 61: /* reduce AGreaterThanLogicalExpr */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list, false);
            }
            break;
            case 62: /* reduce ALessThanOrEqLogicalExpr */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list, false);
            }
            break;
            case 63: /* reduce AGreaterThanOrEqLogicalExpr */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list, false);
            }
            break;
            case 64: /* reduce AEqualsLogicalExpr */
            {
                ArrayList<Object> list = new64();
                push(goTo(23), list, false);
            }
            break;
            case 65: /* reduce ANotEqualsLogicalExpr */
            {
                ArrayList<Object> list = new65();
                push(goTo(23), list, false);
            }
            break;
            case 66: /* reduce APlusMinusExprLogicalExpr */
            {
                ArrayList<Object> list = new66();
                push(goTo(23), list, false);
            }
            break;
            case 67: /* reduce AAdditionPlusMinusExpr */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list, false);
            }
            break;
            case 68: /* reduce ASubtractionPlusMinusExpr */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list, false);
            }
            break;
            case 69: /* reduce AMultDivModExprPlusMinusExpr */
            {
                ArrayList<Object> list = new69();
                push(goTo(24), list, false);
            }
            break;
            case 70: /* reduce AMultiplicationMultDivModExpr */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list, false);
            }
            break;
            case 71: /* reduce ADivisionMultDivModExpr */
            {
                ArrayList<Object> list = new71();
                push(goTo(25), list, false);
            }
            break;
            case 72: /* reduce AModuloMultDivModExpr */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list, false);
            }
            break;
            case 73: /* reduce AUnitaryExprMultDivModExpr */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list, false);
            }
            break;
            case 74: /* reduce AUnaryNotUnitaryExpr */
            {
                ArrayList<Object> list = new74();
                push(goTo(26), list, false);
            }
            break;
            case 75: /* reduce AUnaryPlusUnitaryExpr */
            {
                ArrayList<Object> list = new75();
                push(goTo(26), list, false);
            }
            break;
            case 76: /* reduce AUnaryMinusUnitaryExpr */
            {
                ArrayList<Object> list = new76();
                push(goTo(26), list, false);
            }
            break;
            case 77: /* reduce APrimaryUnitaryExpr */
            {
                ArrayList<Object> list = new77();
                push(goTo(26), list, false);
            }
            break;
            case 78: /* reduce APrimaryFieldPrimary */
            {
                ArrayList<Object> list = new78();
                push(goTo(27), list, false);
            }
            break;
            case 79: /* reduce APrimaryMethodCallPrimary */
            {
                ArrayList<Object> list = new79();
                push(goTo(27), list, false);
            }
            break;
            case 80: /* reduce APrimaryIntegerLiteralPrimary */
            {
                ArrayList<Object> list = new80();
                push(goTo(27), list, false);
            }
            break;
            case 81: /* reduce APrimaryCharLiteralPrimary */
            {
                ArrayList<Object> list = new81();
                push(goTo(27), list, false);
            }
            break;
            case 82: /* reduce APrimaryStringLiteralPrimary */
            {
                ArrayList<Object> list = new82();
                push(goTo(27), list, false);
            }
            break;
            case 83: /* reduce APrimaryFloatLiteralPrimary */
            {
                ArrayList<Object> list = new83();
                push(goTo(27), list, false);
            }
            break;
            case 84: /* reduce APrimaryTruePrimary */
            {
                ArrayList<Object> list = new84();
                push(goTo(27), list, false);
            }
            break;
            case 85: /* reduce APrimaryFalsePrimary */
            {
                ArrayList<Object> list = new85();
                push(goTo(27), list, false);
            }
            break;
            case 86: /* reduce APrimaryExprPrimary */
            {
                ArrayList<Object> list = new86();
                push(goTo(27), list, false);
            }
            break;
            case 87: /* reduce AIntegerLiteralIntegerParamOrValue */
            {
                ArrayList<Object> list = new87();
                push(goTo(28), list, false);
            }
            break;
            case 88: /* reduce AIdentifierIntegerParamOrValue */
            {
                ArrayList<Object> list = new88();
                push(goTo(28), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AClassDeclsProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PClassDecls pclassdeclsNode2;
        pclassdeclsNode2 = (PClassDecls)nodeArrayList1.get(0);

        pprogramNode1 = new AClassDeclsProgram(pclassdeclsNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMultClassDeclClassDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecls pclassdeclsNode1;
        {
            // Block
        PClassDecls pclassdeclsNode2;
        PClassDecl pclassdeclNode3;
        pclassdeclsNode2 = (PClassDecls)nodeArrayList1.get(0);
        pclassdeclNode3 = (PClassDecl)nodeArrayList2.get(0);

        pclassdeclsNode1 = new AMultClassDeclClassDecls(pclassdeclsNode2, pclassdeclNode3);
        }
	nodeList.add(pclassdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASingleClassDeclClassDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecls pclassdeclsNode1;
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);

        pclassdeclsNode1 = new ASingleClassDeclClassDecls(pclassdeclNode2);
        }
	nodeList.add(pclassdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AEmptyClassDeclClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        PClassHdr pclasshdrNode2;
        TLBrace tlbraceNode3;
        TRBrace trbraceNode4;
        pclasshdrNode2 = (PClassHdr)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pclassdeclNode1 = new AEmptyClassDeclClassDecl(pclasshdrNode2, tlbraceNode3, trbraceNode4);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AClassDeclClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        PClassHdr pclasshdrNode2;
        TLBrace tlbraceNode3;
        PMemberDecls pmemberdeclsNode4;
        TRBrace trbraceNode5;
        pclasshdrNode2 = (PClassHdr)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        pmemberdeclsNode4 = (PMemberDecls)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pclassdeclNode1 = new AClassDeclClassDecl(pclasshdrNode2, tlbraceNode3, pmemberdeclsNode4, trbraceNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AClassHdrClassHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassHdr pclasshdrNode1;
        {
            // Block
        TKclass tkclassNode2;
        TIdentifier tidentifierNode3;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pclasshdrNode1 = new AClassHdrClassHdr(tkclassNode2, tidentifierNode3);
        }
	nodeList.add(pclasshdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMultMemberDeclMemberDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMemberDecls pmemberdeclsNode1;
        {
            // Block
        PMemberDecls pmemberdeclsNode2;
        PMember pmemberNode3;
        pmemberdeclsNode2 = (PMemberDecls)nodeArrayList1.get(0);
        pmemberNode3 = (PMember)nodeArrayList2.get(0);

        pmemberdeclsNode1 = new AMultMemberDeclMemberDecls(pmemberdeclsNode2, pmemberNode3);
        }
	nodeList.add(pmemberdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASingleMemberDeclMemberDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMemberDecls pmemberdeclsNode1;
        {
            // Block
        PMember pmemberNode2;
        pmemberNode2 = (PMember)nodeArrayList1.get(0);

        pmemberdeclsNode1 = new ASingleMemberDeclMemberDecls(pmemberNode2);
        }
	nodeList.add(pmemberdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFieldMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        PField pfieldNode2;
        pfieldNode2 = (PField)nodeArrayList1.get(0);

        pmemberNode1 = new AFieldMember(pfieldNode2);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMethodMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        PMethod pmethodNode2;
        pmethodNode2 = (PMethod)nodeArrayList1.get(0);

        pmemberNode1 = new AMethodMember(pmethodNode2);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANoMemberMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pmemberNode1 = new ANoMemberMember(tsemicolonNode2);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFieldDeclField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pfieldNode1 = new AFieldDeclField(ptypeNode2, tidentifierNode3, tsemicolonNode4);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AFieldDeclAndInitField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TEqualTo tequaltoNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tequaltoNode4 = (TEqualTo)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pfieldNode1 = new AFieldDeclAndInitField(ptypeNode2, tidentifierNode3, tequaltoNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AArrDeclField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLBkt tlbktNode4;
        PIntegerParamOrValue pintegerparamorvalueNode5;
        TRBkt trbktNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbktNode4 = (TLBkt)nodeArrayList3.get(0);
        pintegerparamorvalueNode5 = (PIntegerParamOrValue)nodeArrayList4.get(0);
        trbktNode6 = (TRBkt)nodeArrayList5.get(0);

        pfieldNode1 = new AArrDeclField(ptypeNode2, tidentifierNode3, tlbktNode4, pintegerparamorvalueNode5, trbktNode6);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABoolTypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolTypeType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ACharTypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptypeNode1 = new ACharTypeType(tcharNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AFloatTypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptypeNode1 = new AFloatTypeType(tfloatNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIntTypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntTypeType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AStringTypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringTypeType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AMethodDeclMethod */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PMethodHdr pmethodhdrNode2;
        TLPar tlparNode3;
        PFormals pformalsNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        pmethodhdrNode2 = (PMethodHdr)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pformalsNode4 = (PFormals)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pmethodNode1 = new AMethodDeclMethod(pmethodhdrNode2, tlparNode3, pformalsNode4, trparNode5, pblockNode6);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANoParamMethodDeclMethod */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PMethodHdr pmethodhdrNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        PBlock pblockNode5;
        pmethodhdrNode2 = (PMethodHdr)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pmethodNode1 = new ANoParamMethodDeclMethod(pmethodhdrNode2, tlparNode3, trparNode4, pblockNode5);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMethodHdrDeclVoidMethodHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHdr pmethodhdrNode1;
        {
            // Block
        TVoid tvoidNode2;
        TIdentifier tidentifierNode3;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pmethodhdrNode1 = new AMethodHdrDeclVoidMethodHdr(tvoidNode2, tidentifierNode3);
        }
	nodeList.add(pmethodhdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMethodHdrDeclMethodHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHdr pmethodhdrNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pmethodhdrNode1 = new AMethodHdrDeclMethodHdr(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pmethodhdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMultFormalFormals */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        PFormals pformalsNode2;
        TComma tcommaNode3;
        PFormal pformalNode4;
        pformalsNode2 = (PFormals)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pformalNode4 = (PFormal)nodeArrayList3.get(0);

        pformalsNode1 = new AMultFormalFormals(pformalsNode2, tcommaNode3, pformalNode4);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASingleFormalFormals */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        PFormal pformalNode2;
        pformalNode2 = (PFormal)nodeArrayList1.get(0);

        pformalsNode1 = new ASingleFormalFormals(pformalNode2);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFormalDeclFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pformalNode1 = new AFormalDeclFormal(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AArrFormalDeclFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLBkt tlbktNode4;
        TRBkt trbktNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbktNode4 = (TLBkt)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        pformalNode1 = new AArrFormalDeclFormal(ptypeNode2, tidentifierNode3, tlbktNode4, trbktNode5);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABlockDeclBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PStmts pstmtsNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlockDeclBlock(tlbraceNode2, pstmtsNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AEmptyBlockBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        TRBrace trbraceNode3;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        trbraceNode3 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new AEmptyBlockBlock(tlbraceNode2, trbraceNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMultStmtStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmts pstmtsNode2;
        PStmt pstmtNode3;
        pstmtsNode2 = (PStmts)nodeArrayList1.get(0);
        pstmtNode3 = (PStmt)nodeArrayList2.get(0);

        pstmtsNode1 = new AMultStmtStmts(pstmtsNode2, pstmtNode3);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AStmtStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        pstmtsNode1 = new AStmtStmts(pstmtNode2);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASimpleStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PSimpleStmt psimplestmtNode2;
        psimplestmtNode2 = (PSimpleStmt)nodeArrayList1.get(0);

        pstmtNode1 = new ASimpleStmtStmt(psimplestmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIfElseStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        PStmt pstmtNode4;
        TElse telseNode5;
        PStmt pstmtNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pstmtNode4 = (PStmt)nodeArrayList3.get(0);
        telseNode5 = (TElse)nodeArrayList4.get(0);
        pstmtNode6 = (PStmt)nodeArrayList5.get(0);

        pstmtNode1 = new AIfElseStmtStmt(tifNode2, pconditionNode3, pstmtNode4, telseNode5, pstmtNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AConditionCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pconditionNode1 = new AConditionCondition(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALocalDeclSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PLocalDecl plocaldeclNode2;
        plocaldeclNode2 = (PLocalDecl)nodeArrayList1.get(0);

        psimplestmtNode1 = new ALocalDeclSimpleStmt(plocaldeclNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAssignmentSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PFieldAccess pfieldaccessNode2;
        TEqualTo tequaltoNode3;
        PExpr pexprNode4;
        TSemicolon tsemicolonNode5;
        pfieldaccessNode2 = (PFieldAccess)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        psimplestmtNode1 = new AAssignmentSimpleStmt(pfieldaccessNode2, tequaltoNode3, pexprNode4, tsemicolonNode5);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMethodCallSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        TSemicolon tsemicolonNode3;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        psimplestmtNode1 = new AMethodCallSimpleStmt(pmethodcallNode2, tsemicolonNode3);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AReturnVoidSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        psimplestmtNode1 = new AReturnVoidSimpleStmt(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AReturnExprSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        psimplestmtNode1 = new AReturnExprSimpleStmt(treturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ABlockSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        psimplestmtNode1 = new ABlockSimpleStmt(pblockNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AWhileLoopSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PCondition pconditionNode3;
        PBlock pblockNode4;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        psimplestmtNode1 = new AWhileLoopSimpleStmt(twhileNode2, pconditionNode3, pblockNode4);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADoWhileLoopSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TDo tdoNode2;
        PStmts pstmtsNode3;
        TWhile twhileNode4;
        PCondition pconditionNode5;
        TSemicolon tsemicolonNode6;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        twhileNode4 = (TWhile)nodeArrayList3.get(0);
        pconditionNode5 = (PCondition)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        psimplestmtNode1 = new ADoWhileLoopSimpleStmt(tdoNode2, pstmtsNode3, twhileNode4, pconditionNode5, tsemicolonNode6);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANoStatementSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        psimplestmtNode1 = new ANoStatementSimpleStmt(tsemicolonNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AVarDeclLocalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDecl plocaldeclNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        plocaldeclNode1 = new AVarDeclLocalDecl(ptypeNode2, tidentifierNode3, tsemicolonNode4);
        }
	nodeList.add(plocaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AVarDeclAndInitLocalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDecl plocaldeclNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TEqualTo tequaltoNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tequaltoNode4 = (TEqualTo)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plocaldeclNode1 = new AVarDeclAndInitLocalDecl(ptypeNode2, tidentifierNode3, tequaltoNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(plocaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AArrDeclLocalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDecl plocaldeclNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLBkt tlbktNode4;
        PIntegerParamOrValue pintegerparamorvalueNode5;
        TRBkt trbktNode6;
        TSemicolon tsemicolonNode7;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbktNode4 = (TLBkt)nodeArrayList3.get(0);
        pintegerparamorvalueNode5 = (PIntegerParamOrValue)nodeArrayList4.get(0);
        trbktNode6 = (TRBkt)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        plocaldeclNode1 = new AArrDeclLocalDecl(ptypeNode2, tidentifierNode3, tlbktNode4, pintegerparamorvalueNode5, trbktNode6, tsemicolonNode7);
        }
	nodeList.add(plocaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AFieldSelfFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfieldaccessNode1 = new AFieldSelfFieldAccess(tidentifierNode2);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AFieldDotAccessFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pfieldaccessNode1 = new AFieldDotAccessFieldAccess(tidentifierNode2, tdotNode3, tidentifierNode4);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AArrayRefFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        PArrayRef parrayrefNode2;
        parrayrefNode2 = (PArrayRef)nodeArrayList1.get(0);

        pfieldaccessNode1 = new AArrayRefFieldAccess(parrayrefNode2);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIdentifierArrayRefArrayRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayRef parrayrefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLBkt tlbktNode3;
        PIntegerParamOrValue pintegerparamorvalueNode4;
        TRBkt trbktNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        pintegerparamorvalueNode4 = (PIntegerParamOrValue)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        parrayrefNode1 = new AIdentifierArrayRefArrayRef(tidentifierNode2, tlbktNode3, pintegerparamorvalueNode4, trbktNode5);
        }
	nodeList.add(parrayrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AArrayDotRefArrayRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayRef parrayrefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        TLBkt tlbktNode5;
        PIntegerParamOrValue pintegerparamorvalueNode6;
        TRBkt trbktNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList4.get(0);
        pintegerparamorvalueNode6 = (PIntegerParamOrValue)nodeArrayList5.get(0);
        trbktNode7 = (TRBkt)nodeArrayList6.get(0);

        parrayrefNode1 = new AArrayDotRefArrayRef(tidentifierNode2, tdotNode3, tidentifierNode4, tlbktNode5, pintegerparamorvalueNode6, trbktNode7);
        }
	nodeList.add(parrayrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMethodCallNoArgMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pmethodcallNode1 = new AMethodCallNoArgMethodCall(tidentifierNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AMethodCallWithArgMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        TIntegerLiteral tintegerliteralNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tintegerliteralNode4 = (TIntegerLiteral)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmethodcallNode1 = new AMethodCallWithArgMethodCall(tidentifierNode2, tlparNode3, tintegerliteralNode4, trparNode5);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMethodCallWithDotOperNoArgMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        TLPar tlparNode5;
        TRPar trparNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pmethodcallNode1 = new AMethodCallWithDotOperNoArgMethodCall(tidentifierNode2, tdotNode3, tidentifierNode4, tlparNode5, trparNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMethodCallWithDotOperAndArgMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        TLPar tlparNode5;
        PArgs pargsNode6;
        TRPar trparNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pargsNode6 = (PArgs)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pmethodcallNode1 = new AMethodCallWithDotOperAndArgMethodCall(tidentifierNode2, tdotNode3, tidentifierNode4, tlparNode5, pargsNode6, trparNode7);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AMultArgArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArgs pargsNode2;
        TComma tcommaNode3;
        PExpr pexprNode4;
        pargsNode2 = (PArgs)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pargsNode1 = new AMultArgArgs(pargsNode2, tcommaNode3, pexprNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASingleArgArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pargsNode1 = new ASingleArgArgs(pexprNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AExprAndLogicalExprExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOr torNode3;
        PLogicalExpr plogicalexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        plogicalexprNode4 = (PLogicalExpr)nodeArrayList3.get(0);

        pexprNode1 = new AExprAndLogicalExprExpr(pexprNode2, torNode3, plogicalexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AExprOrLogicalExprExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TAnd tandNode3;
        PLogicalExpr plogicalexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        plogicalexprNode4 = (PLogicalExpr)nodeArrayList3.get(0);

        pexprNode1 = new AExprOrLogicalExprExpr(pexprNode2, tandNode3, plogicalexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ALogicalExprExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLogicalExpr plogicalexprNode2;
        plogicalexprNode2 = (PLogicalExpr)nodeArrayList1.get(0);

        pexprNode1 = new ALogicalExprExpr(plogicalexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ALessThanLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TLessThan tlessthanNode3;
        PPlusMinusExpr pplusminusexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tlessthanNode3 = (TLessThan)nodeArrayList2.get(0);
        pplusminusexprNode4 = (PPlusMinusExpr)nodeArrayList3.get(0);

        plogicalexprNode1 = new ALessThanLogicalExpr(pplusminusexprNode2, tlessthanNode3, pplusminusexprNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AGreaterThanLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TGreaterThan tgreaterthanNode3;
        PPlusMinusExpr pplusminusexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tgreaterthanNode3 = (TGreaterThan)nodeArrayList2.get(0);
        pplusminusexprNode4 = (PPlusMinusExpr)nodeArrayList3.get(0);

        plogicalexprNode1 = new AGreaterThanLogicalExpr(pplusminusexprNode2, tgreaterthanNode3, pplusminusexprNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ALessThanOrEqLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TLessThanOrEq tlessthanoreqNode3;
        PPlusMinusExpr pplusminusexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tlessthanoreqNode3 = (TLessThanOrEq)nodeArrayList2.get(0);
        pplusminusexprNode4 = (PPlusMinusExpr)nodeArrayList3.get(0);

        plogicalexprNode1 = new ALessThanOrEqLogicalExpr(pplusminusexprNode2, tlessthanoreqNode3, pplusminusexprNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AGreaterThanOrEqLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TGreaterThanOrEq tgreaterthanoreqNode3;
        PPlusMinusExpr pplusminusexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tgreaterthanoreqNode3 = (TGreaterThanOrEq)nodeArrayList2.get(0);
        pplusminusexprNode4 = (PPlusMinusExpr)nodeArrayList3.get(0);

        plogicalexprNode1 = new AGreaterThanOrEqLogicalExpr(pplusminusexprNode2, tgreaterthanoreqNode3, pplusminusexprNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AEqualsLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TEquals tequalsNode3;
        PPlusMinusExpr pplusminusexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pplusminusexprNode4 = (PPlusMinusExpr)nodeArrayList3.get(0);

        plogicalexprNode1 = new AEqualsLogicalExpr(pplusminusexprNode2, tequalsNode3, pplusminusexprNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANotEqualsLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TNotEquals tnotequalsNode3;
        PPlusMinusExpr pplusminusexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tnotequalsNode3 = (TNotEquals)nodeArrayList2.get(0);
        pplusminusexprNode4 = (PPlusMinusExpr)nodeArrayList3.get(0);

        plogicalexprNode1 = new ANotEqualsLogicalExpr(pplusminusexprNode2, tnotequalsNode3, pplusminusexprNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce APlusMinusExprLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);

        plogicalexprNode1 = new APlusMinusExprLogicalExpr(pplusminusexprNode2);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAdditionPlusMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlusMinusExpr pplusminusexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TPlus tplusNode3;
        PMultDivModExpr pmultdivmodexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultdivmodexprNode4 = (PMultDivModExpr)nodeArrayList3.get(0);

        pplusminusexprNode1 = new AAdditionPlusMinusExpr(pplusminusexprNode2, tplusNode3, pmultdivmodexprNode4);
        }
	nodeList.add(pplusminusexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASubtractionPlusMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlusMinusExpr pplusminusexprNode1;
        {
            // Block
        PPlusMinusExpr pplusminusexprNode2;
        TMinus tminusNode3;
        PMultDivModExpr pmultdivmodexprNode4;
        pplusminusexprNode2 = (PPlusMinusExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultdivmodexprNode4 = (PMultDivModExpr)nodeArrayList3.get(0);

        pplusminusexprNode1 = new ASubtractionPlusMinusExpr(pplusminusexprNode2, tminusNode3, pmultdivmodexprNode4);
        }
	nodeList.add(pplusminusexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AMultDivModExprPlusMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlusMinusExpr pplusminusexprNode1;
        {
            // Block
        PMultDivModExpr pmultdivmodexprNode2;
        pmultdivmodexprNode2 = (PMultDivModExpr)nodeArrayList1.get(0);

        pplusminusexprNode1 = new AMultDivModExprPlusMinusExpr(pmultdivmodexprNode2);
        }
	nodeList.add(pplusminusexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMultiplicationMultDivModExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDivModExpr pmultdivmodexprNode1;
        {
            // Block
        PMultDivModExpr pmultdivmodexprNode2;
        TMult tmultNode3;
        PUnitaryExpr punitaryexprNode4;
        pmultdivmodexprNode2 = (PMultDivModExpr)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        punitaryexprNode4 = (PUnitaryExpr)nodeArrayList3.get(0);

        pmultdivmodexprNode1 = new AMultiplicationMultDivModExpr(pmultdivmodexprNode2, tmultNode3, punitaryexprNode4);
        }
	nodeList.add(pmultdivmodexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ADivisionMultDivModExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDivModExpr pmultdivmodexprNode1;
        {
            // Block
        PMultDivModExpr pmultdivmodexprNode2;
        TDiv tdivNode3;
        PUnitaryExpr punitaryexprNode4;
        pmultdivmodexprNode2 = (PMultDivModExpr)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        punitaryexprNode4 = (PUnitaryExpr)nodeArrayList3.get(0);

        pmultdivmodexprNode1 = new ADivisionMultDivModExpr(pmultdivmodexprNode2, tdivNode3, punitaryexprNode4);
        }
	nodeList.add(pmultdivmodexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AModuloMultDivModExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDivModExpr pmultdivmodexprNode1;
        {
            // Block
        PMultDivModExpr pmultdivmodexprNode2;
        TModulo tmoduloNode3;
        PUnitaryExpr punitaryexprNode4;
        pmultdivmodexprNode2 = (PMultDivModExpr)nodeArrayList1.get(0);
        tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        punitaryexprNode4 = (PUnitaryExpr)nodeArrayList3.get(0);

        pmultdivmodexprNode1 = new AModuloMultDivModExpr(pmultdivmodexprNode2, tmoduloNode3, punitaryexprNode4);
        }
	nodeList.add(pmultdivmodexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AUnitaryExprMultDivModExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDivModExpr pmultdivmodexprNode1;
        {
            // Block
        PUnitaryExpr punitaryexprNode2;
        punitaryexprNode2 = (PUnitaryExpr)nodeArrayList1.get(0);

        pmultdivmodexprNode1 = new AUnitaryExprMultDivModExpr(punitaryexprNode2);
        }
	nodeList.add(pmultdivmodexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AUnaryNotUnitaryExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnitaryExpr punitaryexprNode1;
        {
            // Block
        TNot tnotNode2;
        PUnitaryExpr punitaryexprNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        punitaryexprNode3 = (PUnitaryExpr)nodeArrayList2.get(0);

        punitaryexprNode1 = new AUnaryNotUnitaryExpr(tnotNode2, punitaryexprNode3);
        }
	nodeList.add(punitaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AUnaryPlusUnitaryExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnitaryExpr punitaryexprNode1;
        {
            // Block
        TPlus tplusNode2;
        PUnitaryExpr punitaryexprNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        punitaryexprNode3 = (PUnitaryExpr)nodeArrayList2.get(0);

        punitaryexprNode1 = new AUnaryPlusUnitaryExpr(tplusNode2, punitaryexprNode3);
        }
	nodeList.add(punitaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AUnaryMinusUnitaryExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnitaryExpr punitaryexprNode1;
        {
            // Block
        TMinus tminusNode2;
        PUnitaryExpr punitaryexprNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        punitaryexprNode3 = (PUnitaryExpr)nodeArrayList2.get(0);

        punitaryexprNode1 = new AUnaryMinusUnitaryExpr(tminusNode2, punitaryexprNode3);
        }
	nodeList.add(punitaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce APrimaryUnitaryExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnitaryExpr punitaryexprNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);

        punitaryexprNode1 = new APrimaryUnitaryExpr(pprimaryNode2);
        }
	nodeList.add(punitaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce APrimaryFieldPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PFieldAccess pfieldaccessNode2;
        pfieldaccessNode2 = (PFieldAccess)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryFieldPrimary(pfieldaccessNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce APrimaryMethodCallPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryMethodCallPrimary(pmethodcallNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce APrimaryIntegerLiteralPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryIntegerLiteralPrimary(tintegerliteralNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce APrimaryCharLiteralPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TCharLiteral tcharliteralNode2;
        tcharliteralNode2 = (TCharLiteral)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryCharLiteralPrimary(tcharliteralNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce APrimaryStringLiteralPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryStringLiteralPrimary(tstringliteralNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce APrimaryFloatLiteralPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TFloatLit tfloatlitNode2;
        tfloatlitNode2 = (TFloatLit)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryFloatLiteralPrimary(tfloatlitNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce APrimaryTruePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryTruePrimary(ttrueNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce APrimaryFalsePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryFalsePrimary(tfalseNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce APrimaryExprPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pprimaryNode1 = new APrimaryExprPrimary(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AIntegerLiteralIntegerParamOrValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntegerParamOrValue pintegerparamorvalueNode1;
        {
            // Block
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pintegerparamorvalueNode1 = new AIntegerLiteralIntegerParamOrValue(tintegerliteralNode2);
        }
	nodeList.add(pintegerparamorvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AIdentifierIntegerParamOrValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntegerParamOrValue pintegerparamorvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pintegerparamorvalueNode1 = new AIdentifierIntegerParamOrValue(tidentifierNode2);
        }
	nodeList.add(pintegerparamorvalueNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {36, SHIFT, 1}, },
			{{-1, ERROR, 1}, {57, SHIFT, 6}, },
			{{-1, ERROR, 2}, {58, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {36, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 5}, {21, SHIFT, 8}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 8}, {17, SHIFT, 9}, {22, SHIFT, 10}, {31, SHIFT, 11}, {33, SHIFT, 12}, {40, SHIFT, 13}, {42, SHIFT, 14}, {50, SHIFT, 15}, {55, SHIFT, 16}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 16}, {57, SHIFT, 23}, },
			{{-1, ERROR, 17}, {17, SHIFT, 9}, {22, SHIFT, 24}, {31, SHIFT, 11}, {33, SHIFT, 12}, {40, SHIFT, 13}, {42, SHIFT, 14}, {50, SHIFT, 15}, {55, SHIFT, 16}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 20}, {57, SHIFT, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 22}, {19, SHIFT, 27}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 22}, {17, SHIFT, 28}, {23, SHIFT, 29}, {26, SHIFT, 30}, },
			{{-1, ERROR, 27}, {20, SHIFT, 31}, {31, SHIFT, 11}, {33, SHIFT, 12}, {40, SHIFT, 13}, {42, SHIFT, 14}, {50, SHIFT, 15}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 29}, {56, SHIFT, 35}, {57, SHIFT, 36}, },
			{{-1, ERROR, 30}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 31}, {21, SHIFT, 58}, },
			{{-1, ERROR, 32}, {57, SHIFT, 60}, },
			{{-1, ERROR, 33}, {18, SHIFT, 61}, {20, SHIFT, 62}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 37}, {24, SHIFT, 63}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 40}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 41}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 42}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 43}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 46}, {19, SHIFT, 68}, {23, SHIFT, 69}, {28, SHIFT, 70}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 52}, {13, SHIFT, 71}, {14, SHIFT, 72}, {17, SHIFT, 73}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 66}, {4, SHIFT, 74}, {5, SHIFT, 75}, {8, SHIFT, 76}, {9, SHIFT, 77}, {10, SHIFT, 78}, {11, SHIFT, 79}, {12, SHIFT, 80}, {25, SHIFT, 81}, },
			{{-1, REDUCE, 69}, {6, SHIFT, 82}, {7, SHIFT, 83}, {29, SHIFT, 84}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 58}, {17, SHIFT, 85}, {21, SHIFT, 58}, {22, SHIFT, 86}, {31, SHIFT, 11}, {33, SHIFT, 12}, {37, SHIFT, 87}, {40, SHIFT, 13}, {41, SHIFT, 88}, {42, SHIFT, 14}, {48, SHIFT, 89}, {50, SHIFT, 15}, {54, SHIFT, 90}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 25}, {23, SHIFT, 99}, },
			{{-1, ERROR, 61}, {31, SHIFT, 11}, {33, SHIFT, 12}, {40, SHIFT, 13}, {42, SHIFT, 14}, {50, SHIFT, 15}, },
			{{-1, ERROR, 62}, {21, SHIFT, 58}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 67}, {13, SHIFT, 71}, {14, SHIFT, 72}, {20, SHIFT, 102}, },
			{{-1, ERROR, 68}, {20, SHIFT, 103}, {56, SHIFT, 104}, },
			{{-1, ERROR, 69}, {56, SHIFT, 35}, {57, SHIFT, 36}, },
			{{-1, ERROR, 70}, {57, SHIFT, 106}, },
			{{-1, ERROR, 71}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 72}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 74}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 75}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 76}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 77}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 78}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 79}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 80}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 81}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 82}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 83}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 84}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 87}, {17, SHIFT, 85}, {21, SHIFT, 58}, {31, SHIFT, 11}, {33, SHIFT, 12}, {37, SHIFT, 87}, {40, SHIFT, 13}, {41, SHIFT, 88}, {42, SHIFT, 14}, {48, SHIFT, 89}, {50, SHIFT, 15}, {54, SHIFT, 90}, {57, SHIFT, 48}, },
			{{-1, ERROR, 88}, {19, SHIFT, 121}, },
			{{-1, ERROR, 89}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {17, SHIFT, 123}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 90}, {19, SHIFT, 121}, },
			{{-1, ERROR, 91}, {57, SHIFT, 126}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 93}, {17, SHIFT, 85}, {21, SHIFT, 58}, {22, SHIFT, 127}, {31, SHIFT, 11}, {33, SHIFT, 12}, {37, SHIFT, 87}, {40, SHIFT, 13}, {41, SHIFT, 88}, {42, SHIFT, 14}, {48, SHIFT, 89}, {50, SHIFT, 15}, {54, SHIFT, 90}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 97}, {26, SHIFT, 129}, },
			{{-1, ERROR, 98}, {17, SHIFT, 130}, },
			{{-1, ERROR, 99}, {24, SHIFT, 131}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 104}, {20, SHIFT, 132}, },
			{{-1, ERROR, 105}, {24, SHIFT, 133}, },
			{{-1, REDUCE, 47}, {19, SHIFT, 134}, {23, SHIFT, 135}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 67}, {6, SHIFT, 82}, {7, SHIFT, 83}, {29, SHIFT, 84}, },
			{{-1, REDUCE, 68}, {6, SHIFT, 82}, {7, SHIFT, 83}, {29, SHIFT, 84}, },
			{{-1, REDUCE, 60}, {4, SHIFT, 74}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 62}, {4, SHIFT, 74}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 61}, {4, SHIFT, 74}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 63}, {4, SHIFT, 74}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 64}, {4, SHIFT, 74}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 65}, {4, SHIFT, 74}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 120}, {17, SHIFT, 85}, {21, SHIFT, 58}, {31, SHIFT, 11}, {33, SHIFT, 12}, {37, SHIFT, 87}, {40, SHIFT, 13}, {41, SHIFT, 88}, {42, SHIFT, 14}, {48, SHIFT, 89}, {50, SHIFT, 15}, {54, SHIFT, 136}, {57, SHIFT, 48}, },
			{{-1, ERROR, 121}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 122}, {17, SHIFT, 85}, {21, SHIFT, 58}, {31, SHIFT, 11}, {33, SHIFT, 12}, {37, SHIFT, 87}, {40, SHIFT, 13}, {41, SHIFT, 88}, {42, SHIFT, 14}, {48, SHIFT, 89}, {50, SHIFT, 15}, {54, SHIFT, 90}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 124}, {13, SHIFT, 71}, {14, SHIFT, 72}, {17, SHIFT, 139}, },
			{{-1, ERROR, 125}, {21, SHIFT, 58}, },
			{{-1, ERROR, 126}, {17, SHIFT, 141}, {23, SHIFT, 142}, {26, SHIFT, 143}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 129}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 134}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {20, SHIFT, 145}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 135}, {56, SHIFT, 35}, {57, SHIFT, 36}, },
			{{-1, ERROR, 136}, {19, SHIFT, 121}, },
			{{-1, ERROR, 137}, {13, SHIFT, 71}, {14, SHIFT, 72}, {20, SHIFT, 150}, },
			{{-1, ERROR, 138}, {38, SHIFT, 151}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 142}, {56, SHIFT, 35}, {57, SHIFT, 36}, },
			{{-1, ERROR, 143}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, ERROR, 144}, {13, SHIFT, 71}, {14, SHIFT, 72}, {17, SHIFT, 154}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 146}, {18, SHIFT, 155}, {20, SHIFT, 156}, },
			{{-1, REDUCE, 56}, {13, SHIFT, 71}, {14, SHIFT, 72}, },
			{{-1, ERROR, 148}, {24, SHIFT, 157}, },
			{{-1, ERROR, 149}, {17, SHIFT, 158}, {21, SHIFT, 58}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 151}, {17, SHIFT, 85}, {21, SHIFT, 58}, {31, SHIFT, 11}, {33, SHIFT, 12}, {37, SHIFT, 87}, {40, SHIFT, 13}, {41, SHIFT, 88}, {42, SHIFT, 14}, {48, SHIFT, 89}, {50, SHIFT, 15}, {54, SHIFT, 90}, {57, SHIFT, 48}, },
			{{-1, ERROR, 152}, {24, SHIFT, 160}, },
			{{-1, ERROR, 153}, {13, SHIFT, 71}, {14, SHIFT, 72}, {17, SHIFT, 161}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 155}, {0, SHIFT, 38}, {1, SHIFT, 39}, {4, SHIFT, 40}, {5, SHIFT, 41}, {15, SHIFT, 42}, {19, SHIFT, 43}, {30, SHIFT, 44}, {39, SHIFT, 45}, {53, SHIFT, 46}, {56, SHIFT, 47}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 160}, {17, SHIFT, 163}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 55}, {13, SHIFT, 71}, {14, SHIFT, 72}, },
			{{-1, REDUCE, 45}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, {3, 7}, },
			{{-1, 5}, },
			{{-1, 17}, },
			{{-1, 18}, {17, 25}, },
			{{-1, 19}, },
			{{-1, 91}, {8, 20}, {17, 20}, {27, 32}, {61, 32}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 33}, },
			{{-1, 34}, {61, 100}, },
			{{-1, 92}, {31, 59}, {62, 101}, {125, 140}, {149, 140}, },
			{{-1, 93}, {87, 120}, },
			{{-1, 94}, {93, 128}, {120, 128}, {122, 138}, {151, 159}, },
			{{-1, 122}, {90, 125}, {136, 149}, },
			{{-1, 95}, },
			{{-1, 96}, },
			{{-1, 49}, {58, 97}, {87, 97}, {93, 97}, {120, 97}, {122, 97}, {151, 97}, },
			{{-1, 50}, },
			{{-1, 51}, {58, 98}, {87, 98}, {93, 98}, {120, 98}, {122, 98}, {151, 98}, },
			{{-1, 146}, },
			{{-1, 52}, {43, 67}, {89, 124}, {121, 137}, {129, 144}, {134, 147}, {143, 153}, {155, 162}, },
			{{-1, 53}, {71, 107}, {72, 108}, },
			{{-1, 54}, {76, 111}, {77, 112}, {78, 113}, {79, 114}, {80, 115}, {81, 116}, },
			{{-1, 55}, {74, 109}, {75, 110}, },
			{{-1, 56}, {40, 64}, {41, 65}, {42, 66}, {82, 117}, {83, 118}, {84, 119}, },
			{{-1, 57}, },
			{{-1, 37}, {69, 105}, {135, 148}, {142, 152}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: ';', '}', 'bool', 'char', 'float', 'int', 'string', 'void'",
			"expecting: '('",
			"expecting: ';', '(', '[', '='",
			"expecting: ')', 'bool', 'char', 'float', 'int', 'string'",
			"expecting: integer literal, identifier",
			"expecting: string literal, char literal, '+', '-', '!', '(', float lit, 'false', 'true', integer literal, identifier",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '&&', '||', ';', ',', ')', '!=', '%'",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '&&', '||', ';', ',', '(', ')', '[', '!=', '=', '.', '%'",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '&&', '||', ';', ',', ')', '!=', '=', '%'",
			"expecting: '&&', '||', ';'",
			"expecting: '&&', '||', ';', ',', ')'",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '&&', '||', ';', ',', ')', '!='",
			"expecting: ';', '{', '}', 'bool', 'char', 'do', 'float', 'if', 'int', 'return', 'string', 'while', identifier",
			"expecting: ',', ')', '['",
			"expecting: 'bool', 'char', 'float', 'int', 'string'",
			"expecting: '&&', '||', ')'",
			"expecting: ')', integer literal",
			"expecting: ';', '{', '}', 'bool', 'char', 'do', 'else', 'float', 'if', 'int', 'return', 'string', 'while', identifier",
			"expecting: ';', '{', '}', 'bool', 'char', 'do', 'else', 'float', 'if', 'int', 'return', 'string', 'while', 'void', identifier",
			"expecting: ';', '{', 'bool', 'char', 'do', 'float', 'if', 'int', 'return', 'string', 'while', identifier",
			"expecting: string literal, char literal, '+', '-', '!', ';', '(', float lit, 'false', 'true', integer literal, identifier",
			"expecting: '='",
			"expecting: ';'",
			"expecting: ')'",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '&&', '||', ';', ',', '(', ')', '[', '!=', '=', '%'",
			"expecting: '+', '-', '&&', '||', ';', ',', ')'",
			"expecting: ';', '[', '='",
			"expecting: string literal, char literal, '+', '-', '!', '(', ')', float lit, 'false', 'true', integer literal, identifier",
			"expecting: 'else'",
			"expecting: '&&', '||', ',', ')'",
			"expecting: ';', '{'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 4, 3, 5, 5, 3, 1, 1, 1, 1, 1, 1, 5, 5, 5, 1, 5, 6, 6, 3, 5, 7, 8, 5, 9, 10, 4, 1, 11, 11, 12, 12, 12, 13, 13, 10, 10, 10, 10, 13, 13, 13, 13, 14, 13, 15, 13, 16, 17, 18, 13, 13, 13, 19, 5, 20, 21, 4, 5, 13, 13, 13, 22, 23, 9, 1, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24, 25, 26, 6, 27, 6, 1, 24, 19, 19, 24, 24, 28, 29, 12, 11, 5, 13, 13, 30, 12, 31, 17, 17, 13, 13, 32, 32, 32, 32, 32, 32, 13, 13, 13, 26, 10, 26, 24, 16, 4, 33, 25, 19, 10, 24, 11, 13, 15, 34, 9, 6, 22, 35, 24, 24, 24, 9, 10, 16, 13, 11, 36, 12, 37, 26, 26, 12, 16, 24, 10, 13, 15, 24, 24, 29, 24, 36, 24, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
