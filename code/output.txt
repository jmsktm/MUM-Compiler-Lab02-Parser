java ParserDriver tests/in01.cp
Starting Lexer
Starting Parser
class A { } class B { }  
End of Parser test



java ParserDriver tests/in02.cp
Starting Lexer
Starting Parser
class A { int A ; bool B ; char C ; string S ; } class B { int A ; bool B ; char C ; string S ; }  
End of Parser test



java ParserDriver tests/in03.cp
Starting Lexer
Starting Parser
class A { int A ( int A ) { B . A = A ; ; } bool B ( int A , bool B ) { B . A = A ; B . B = B ; } char C ( int A , bool B , char C ) { B . A = A ; B . B = B ; B . C = C ; } string S ( int A , bool B , char C , string S ) { B . A = A ; B . B = B ; B . C = C ; B . S = S ; } } class B { int A ; bool B ; char C ; string S ; }  
End of Parser test



java ParserDriver tests/in04.cp
Starting Lexer
Starting Parser
class A { int A ( int A ) { B . A = A ; ; } bool B ( int A , bool B ) { B . A = A ; B . B = B ; } char C ( int A , bool B , char C ) { B . A = A ; B . B = B ; B . C = C ; } string S ( int A , bool B , char C , string S ) { B . A = A ; if ( B ) B . B = B ; else B . C = C ; B . S = S ; } } class B { int A ; bool B ; char C ; string S ; }  
End of Parser test



java ParserDriver tests/in05.cp
Starting Lexer
Starting Parser
class A { int A ( int A ) { B . A = A ; ; } bool B ( int A , bool B ) { B . A = A ; B . B = B ; while ( i < 10 ) { if ( B ) if ( B . B [ i ] ) i = i + 1 ; else { B . B [ i ] = B ; A . A [ i ] = A . A [ i ] + A ; i = i + 1 ; } else i = i + 1 ; } } char C ( int A [ ] , bool B , char C ) { int i = 0 ; B . A = A ; B . B = B ; B . C = C ; while ( i < 10 ) { if ( B . B [ i ] ) i = i + 1 ; else { B . B [ i ] = B ; A . A [ i ] = A . A [ i ] + A ; i = i + 1 ; } } } string S ( int A , bool B , char C , string S ) { B . A = A ; if ( B ) B . B [ A ] = B ; else B . C = C ; B . S = S ; } } class B { int A [ 10 ] ; bool B [ 10 ] ; char C ; string S ; }  
End of Parser test



java ParserDriver tests/in06.cp
Starting Lexer
Starting Parser
class in06 { void main ( ) { int i ; int j ; int k ; bool p ; bool q ; i = 0 ; j = 0 ; while ( i < 10 ) { if ( i % 2 == 0 ) j = j + i ; else j = j + i + 1 ; i = i + 1 ; } print ( j , "\n" ) ; i = 0 ; k = 0 ; while ( i > 0 ) { k = k + i ; i = i - 1 ; } print ( k , "\n" ) ; } }  
End of Parser test



java ParserDriver tests/in07.cp
Starting Lexer
Starting Parser
class A { int A ( int A ) { B . A = A ; ; } bool B ( int A , bool B ) { B . A = A ; B . B = B ; } char C ( int A , bool B , char C ) { B . A = A ; B . B = B ; B . C = C ; { int A = B . A ; bool B = B . B ; char C = B . C ; string S = B . S ; } } string S ( int A , bool B , char C [ ] , string S ) { read ( C [ B . A ] , B , A , S ) ; B . A = A ; B . B = B ; B . C = C [ B . A ] ; B . S = S ; print ( C [ B . A ] , B , A , S ) ; return B . S ; } } class B { int A ; bool B ; char C ; string S ; void M ( ) { A = A . A ( A ) ; B = A . B ( A , B ) ; C = A . C ( A , B , C ) ; S = A . S ( A , B , C , S ) ; } }  
End of Parser test



java ParserDriver tests/in08.cp
Starting Lexer
Starting Parser
class in08 { void t1 ( ) { return ; } int five ( ) { return 5 ; } int square ( int i ) { return i * i ; } string concat ( string a , string b ) { return a + b ; } string concatN ( string s , string a , int copies ) { if ( copies <= 0 ) { return s ; } else { } while ( 0 < copies ) { s = s + a ; copies = copies - 1 ; } return s ; } void vectorAdd ( int a [ ] , int b [ ] , int c [ ] , int size ) { int i = 0 ; while ( i < size ) { c [ i ] = a [ i ] + b [ i ] ; i = i + 1 ; } } void main ( ) { int c = 7 ; int i ; int j ; string a ; string b ; i = 4 ; j = 7 ; a = "aaa" ; b = "bb" ; t1 ( ) ; print ( five ( ) ) ; print ( square ( i ) ) ; print ( concat ( a , b ) ) ; print ( concatN ( a , b , 3 ) ) ; print ( concatN ( a , "cd" , 7 ) ) ; print ( concatN ( "xyz" , b , i ) ) ; { int A [ 14 ] ; int B [ 14 ] ; int C [ 14 ] ; i = 0 ; while ( i < 14 ) { A [ i ] = 3 * i ; B [ i ] = i * i ; i = i + 1 ; } i = 0 ; while ( i < 14 ) { print ( A [ i ] , " " ) ; i = i + 1 ; } print ( "\n" ) ; i = 0 ; while ( i < 14 ) { print ( B [ i ] , " " ) ; i = i + 1 ; } print ( "\n" ) ; vectorAdd ( A , B , C , 14 ) ; i = 0 ; while ( i < 14 ) { print ( C [ i ] , " " ) ; i = i + 1 ; } print ( "\n" ) ; vectorAdd ( C , B , A , 14 ) ; i = 0 ; while ( i < 14 ) { print ( A [ i ] , " " ) ; i = i + 1 ; } print ( "\n" ) ; } } }  
End of Parser test



java ParserDriver tests/in09.cp
Starting Lexer
Starting Parser
class in09 { int C ; int B ; int testMethod ( int A ) { if ( A - 2 < B + 7 == B > 10 != C == B ) B = A ; ; } ; void testMethod2 ( char A ) { if ( A - 2 < B + 7 || B > 10 && C == B || A <= C == B > 10 != C == B ) C = A ; } }  
End of Parser test



java ParserDriver tests/in10.cp
Starting Lexer
Starting Parser
class A { int A ; bool B ; char C ; string S ; int i ; int j ; int k ; bool a ; bool b ; bool c ; int ad = i + 100 - 5 * j / ( k / 20 ) ; int ae = a * 4 / '6' + ( 3 * i - 1 ) ; int af = ( - a + b * '3' ) / ( c - + b ) ; } class B { int A = - A . A ; bool B = ! A . B ; char C = A . C ; string S = A . S ; int D = + A . A ; }  
End of Parser test



