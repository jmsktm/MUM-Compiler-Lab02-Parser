/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAClassDeclsProgram(AClassDeclsProgram node)
    {
        defaultIn(node);
    }

    public void outAClassDeclsProgram(AClassDeclsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDeclsProgram(AClassDeclsProgram node)
    {
        inAClassDeclsProgram(node);
        if(node.getClassDecls() != null)
        {
            node.getClassDecls().apply(this);
        }
        outAClassDeclsProgram(node);
    }

    public void inAMultClassDeclClassDecls(AMultClassDeclClassDecls node)
    {
        defaultIn(node);
    }

    public void outAMultClassDeclClassDecls(AMultClassDeclClassDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultClassDeclClassDecls(AMultClassDeclClassDecls node)
    {
        inAMultClassDeclClassDecls(node);
        if(node.getClassDecls() != null)
        {
            node.getClassDecls().apply(this);
        }
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        outAMultClassDeclClassDecls(node);
    }

    public void inASingleClassDeclClassDecls(ASingleClassDeclClassDecls node)
    {
        defaultIn(node);
    }

    public void outASingleClassDeclClassDecls(ASingleClassDeclClassDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleClassDeclClassDecls(ASingleClassDeclClassDecls node)
    {
        inASingleClassDeclClassDecls(node);
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        outASingleClassDeclClassDecls(node);
    }

    public void inAEmptyClassDeclClassDecl(AEmptyClassDeclClassDecl node)
    {
        defaultIn(node);
    }

    public void outAEmptyClassDeclClassDecl(AEmptyClassDeclClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyClassDeclClassDecl(AEmptyClassDeclClassDecl node)
    {
        inAEmptyClassDeclClassDecl(node);
        if(node.getClassHdr() != null)
        {
            node.getClassHdr().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAEmptyClassDeclClassDecl(node);
    }

    public void inAClassDeclClassDecl(AClassDeclClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassDeclClassDecl(AClassDeclClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDeclClassDecl(AClassDeclClassDecl node)
    {
        inAClassDeclClassDecl(node);
        if(node.getClassHdr() != null)
        {
            node.getClassHdr().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getMemberDecls() != null)
        {
            node.getMemberDecls().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAClassDeclClassDecl(node);
    }

    public void inAClassHdrClassHdr(AClassHdrClassHdr node)
    {
        defaultIn(node);
    }

    public void outAClassHdrClassHdr(AClassHdrClassHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassHdrClassHdr(AClassHdrClassHdr node)
    {
        inAClassHdrClassHdr(node);
        if(node.getKclass() != null)
        {
            node.getKclass().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassHdrClassHdr(node);
    }

    public void inAMultMemberDeclMemberDecls(AMultMemberDeclMemberDecls node)
    {
        defaultIn(node);
    }

    public void outAMultMemberDeclMemberDecls(AMultMemberDeclMemberDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMemberDeclMemberDecls(AMultMemberDeclMemberDecls node)
    {
        inAMultMemberDeclMemberDecls(node);
        if(node.getMemberDecls() != null)
        {
            node.getMemberDecls().apply(this);
        }
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        outAMultMemberDeclMemberDecls(node);
    }

    public void inASingleMemberDeclMemberDecls(ASingleMemberDeclMemberDecls node)
    {
        defaultIn(node);
    }

    public void outASingleMemberDeclMemberDecls(ASingleMemberDeclMemberDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleMemberDeclMemberDecls(ASingleMemberDeclMemberDecls node)
    {
        inASingleMemberDeclMemberDecls(node);
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        outASingleMemberDeclMemberDecls(node);
    }

    public void inAFieldMember(AFieldMember node)
    {
        defaultIn(node);
    }

    public void outAFieldMember(AFieldMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldMember(AFieldMember node)
    {
        inAFieldMember(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAFieldMember(node);
    }

    public void inAMethodMember(AMethodMember node)
    {
        defaultIn(node);
    }

    public void outAMethodMember(AMethodMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodMember(AMethodMember node)
    {
        inAMethodMember(node);
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outAMethodMember(node);
    }

    public void inANoMemberMember(ANoMemberMember node)
    {
        defaultIn(node);
    }

    public void outANoMemberMember(ANoMemberMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoMemberMember(ANoMemberMember node)
    {
        inANoMemberMember(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoMemberMember(node);
    }

    public void inAFieldDeclField(AFieldDeclField node)
    {
        defaultIn(node);
    }

    public void outAFieldDeclField(AFieldDeclField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldDeclField(AFieldDeclField node)
    {
        inAFieldDeclField(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFieldDeclField(node);
    }

    public void inAFieldDeclAndInitField(AFieldDeclAndInitField node)
    {
        defaultIn(node);
    }

    public void outAFieldDeclAndInitField(AFieldDeclAndInitField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldDeclAndInitField(AFieldDeclAndInitField node)
    {
        inAFieldDeclAndInitField(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFieldDeclAndInitField(node);
    }

    public void inAArrDeclField(AArrDeclField node)
    {
        defaultIn(node);
    }

    public void outAArrDeclField(AArrDeclField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrDeclField(AArrDeclField node)
    {
        inAArrDeclField(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getIntegerParamOrValue() != null)
        {
            node.getIntegerParamOrValue().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAArrDeclField(node);
    }

    public void inABoolTypeType(ABoolTypeType node)
    {
        defaultIn(node);
    }

    public void outABoolTypeType(ABoolTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTypeType(ABoolTypeType node)
    {
        inABoolTypeType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTypeType(node);
    }

    public void inACharTypeType(ACharTypeType node)
    {
        defaultIn(node);
    }

    public void outACharTypeType(ACharTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTypeType(ACharTypeType node)
    {
        inACharTypeType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharTypeType(node);
    }

    public void inAFloatTypeType(AFloatTypeType node)
    {
        defaultIn(node);
    }

    public void outAFloatTypeType(AFloatTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTypeType(AFloatTypeType node)
    {
        inAFloatTypeType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatTypeType(node);
    }

    public void inAIntTypeType(AIntTypeType node)
    {
        defaultIn(node);
    }

    public void outAIntTypeType(AIntTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeType(AIntTypeType node)
    {
        inAIntTypeType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeType(node);
    }

    public void inAStringTypeType(AStringTypeType node)
    {
        defaultIn(node);
    }

    public void outAStringTypeType(AStringTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeType(AStringTypeType node)
    {
        inAStringTypeType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTypeType(node);
    }

    public void inAMethodDeclMethod(AMethodDeclMethod node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclMethod(AMethodDeclMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclMethod(AMethodDeclMethod node)
    {
        inAMethodDeclMethod(node);
        if(node.getMethodHdr() != null)
        {
            node.getMethodHdr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAMethodDeclMethod(node);
    }

    public void inANoParamMethodDeclMethod(ANoParamMethodDeclMethod node)
    {
        defaultIn(node);
    }

    public void outANoParamMethodDeclMethod(ANoParamMethodDeclMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoParamMethodDeclMethod(ANoParamMethodDeclMethod node)
    {
        inANoParamMethodDeclMethod(node);
        if(node.getMethodHdr() != null)
        {
            node.getMethodHdr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outANoParamMethodDeclMethod(node);
    }

    public void inAMethodHdrDeclVoidMethodHdr(AMethodHdrDeclVoidMethodHdr node)
    {
        defaultIn(node);
    }

    public void outAMethodHdrDeclVoidMethodHdr(AMethodHdrDeclVoidMethodHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodHdrDeclVoidMethodHdr(AMethodHdrDeclVoidMethodHdr node)
    {
        inAMethodHdrDeclVoidMethodHdr(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMethodHdrDeclVoidMethodHdr(node);
    }

    public void inAMethodHdrDeclMethodHdr(AMethodHdrDeclMethodHdr node)
    {
        defaultIn(node);
    }

    public void outAMethodHdrDeclMethodHdr(AMethodHdrDeclMethodHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodHdrDeclMethodHdr(AMethodHdrDeclMethodHdr node)
    {
        inAMethodHdrDeclMethodHdr(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMethodHdrDeclMethodHdr(node);
    }

    public void inAMultFormalFormals(AMultFormalFormals node)
    {
        defaultIn(node);
    }

    public void outAMultFormalFormals(AMultFormalFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFormalFormals(AMultFormalFormals node)
    {
        inAMultFormalFormals(node);
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outAMultFormalFormals(node);
    }

    public void inASingleFormalFormals(ASingleFormalFormals node)
    {
        defaultIn(node);
    }

    public void outASingleFormalFormals(ASingleFormalFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFormalFormals(ASingleFormalFormals node)
    {
        inASingleFormalFormals(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outASingleFormalFormals(node);
    }

    public void inAFormalDeclFormal(AFormalDeclFormal node)
    {
        defaultIn(node);
    }

    public void outAFormalDeclFormal(AFormalDeclFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalDeclFormal(AFormalDeclFormal node)
    {
        inAFormalDeclFormal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFormalDeclFormal(node);
    }

    public void inAArrFormalDeclFormal(AArrFormalDeclFormal node)
    {
        defaultIn(node);
    }

    public void outAArrFormalDeclFormal(AArrFormalDeclFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrFormalDeclFormal(AArrFormalDeclFormal node)
    {
        inAArrFormalDeclFormal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAArrFormalDeclFormal(node);
    }

    public void inABlockDeclBlock(ABlockDeclBlock node)
    {
        defaultIn(node);
    }

    public void outABlockDeclBlock(ABlockDeclBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockDeclBlock(ABlockDeclBlock node)
    {
        inABlockDeclBlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABlockDeclBlock(node);
    }

    public void inAEmptyBlockBlock(AEmptyBlockBlock node)
    {
        defaultIn(node);
    }

    public void outAEmptyBlockBlock(AEmptyBlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyBlockBlock(AEmptyBlockBlock node)
    {
        inAEmptyBlockBlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAEmptyBlockBlock(node);
    }

    public void inAMultStmtStmts(AMultStmtStmts node)
    {
        defaultIn(node);
    }

    public void outAMultStmtStmts(AMultStmtStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultStmtStmts(AMultStmtStmts node)
    {
        inAMultStmtStmts(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAMultStmtStmts(node);
    }

    public void inAStmtStmts(AStmtStmts node)
    {
        defaultIn(node);
    }

    public void outAStmtStmts(AStmtStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtStmts(AStmtStmts node)
    {
        inAStmtStmts(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAStmtStmts(node);
    }

    public void inASimpleStmtStmt(ASimpleStmtStmt node)
    {
        defaultIn(node);
    }

    public void outASimpleStmtStmt(ASimpleStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStmtStmt(ASimpleStmtStmt node)
    {
        inASimpleStmtStmt(node);
        if(node.getSimpleStmt() != null)
        {
            node.getSimpleStmt().apply(this);
        }
        outASimpleStmtStmt(node);
    }

    public void inAIfElseStmtStmt(AIfElseStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmtStmt(AIfElseStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmtStmt(AIfElseStmtStmt node)
    {
        inAIfElseStmtStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfElseStmtStmt(node);
    }

    public void inAConditionCondition(AConditionCondition node)
    {
        defaultIn(node);
    }

    public void outAConditionCondition(AConditionCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionCondition(AConditionCondition node)
    {
        inAConditionCondition(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAConditionCondition(node);
    }

    public void inALocalDeclSimpleStmt(ALocalDeclSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outALocalDeclSimpleStmt(ALocalDeclSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDeclSimpleStmt(ALocalDeclSimpleStmt node)
    {
        inALocalDeclSimpleStmt(node);
        if(node.getLocalDecl() != null)
        {
            node.getLocalDecl().apply(this);
        }
        outALocalDeclSimpleStmt(node);
    }

    public void inAAssignmentSimpleStmt(AAssignmentSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignmentSimpleStmt(AAssignmentSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentSimpleStmt(AAssignmentSimpleStmt node)
    {
        inAAssignmentSimpleStmt(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentSimpleStmt(node);
    }

    public void inAMethodCallSimpleStmt(AMethodCallSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAMethodCallSimpleStmt(AMethodCallSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallSimpleStmt(AMethodCallSimpleStmt node)
    {
        inAMethodCallSimpleStmt(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAMethodCallSimpleStmt(node);
    }

    public void inAReturnVoidSimpleStmt(AReturnVoidSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnVoidSimpleStmt(AReturnVoidSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnVoidSimpleStmt(AReturnVoidSimpleStmt node)
    {
        inAReturnVoidSimpleStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnVoidSimpleStmt(node);
    }

    public void inAReturnExprSimpleStmt(AReturnExprSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnExprSimpleStmt(AReturnExprSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExprSimpleStmt(AReturnExprSimpleStmt node)
    {
        inAReturnExprSimpleStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnExprSimpleStmt(node);
    }

    public void inABlockSimpleStmt(ABlockSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outABlockSimpleStmt(ABlockSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockSimpleStmt(ABlockSimpleStmt node)
    {
        inABlockSimpleStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockSimpleStmt(node);
    }

    public void inAWhileLoopSimpleStmt(AWhileLoopSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileLoopSimpleStmt(AWhileLoopSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileLoopSimpleStmt(AWhileLoopSimpleStmt node)
    {
        inAWhileLoopSimpleStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAWhileLoopSimpleStmt(node);
    }

    public void inADoWhileLoopSimpleStmt(ADoWhileLoopSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outADoWhileLoopSimpleStmt(ADoWhileLoopSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoWhileLoopSimpleStmt(ADoWhileLoopSimpleStmt node)
    {
        inADoWhileLoopSimpleStmt(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADoWhileLoopSimpleStmt(node);
    }

    public void inANoStatementSimpleStmt(ANoStatementSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outANoStatementSimpleStmt(ANoStatementSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoStatementSimpleStmt(ANoStatementSimpleStmt node)
    {
        inANoStatementSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoStatementSimpleStmt(node);
    }

    public void inAVarDeclLocalDecl(AVarDeclLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDeclLocalDecl(AVarDeclLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclLocalDecl(AVarDeclLocalDecl node)
    {
        inAVarDeclLocalDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDeclLocalDecl(node);
    }

    public void inAVarDeclAndInitLocalDecl(AVarDeclAndInitLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDeclAndInitLocalDecl(AVarDeclAndInitLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclAndInitLocalDecl(AVarDeclAndInitLocalDecl node)
    {
        inAVarDeclAndInitLocalDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDeclAndInitLocalDecl(node);
    }

    public void inAArrDeclLocalDecl(AArrDeclLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAArrDeclLocalDecl(AArrDeclLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrDeclLocalDecl(AArrDeclLocalDecl node)
    {
        inAArrDeclLocalDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getIntegerParamOrValue() != null)
        {
            node.getIntegerParamOrValue().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAArrDeclLocalDecl(node);
    }

    public void inAIdentifierFieldAccessFieldAccess(AIdentifierFieldAccessFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFieldAccessFieldAccess(AIdentifierFieldAccessFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierFieldAccessFieldAccess(AIdentifierFieldAccessFieldAccess node)
    {
        inAIdentifierFieldAccessFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFieldAccessFieldAccess(node);
    }

    public void inAIdentifierArrayAccessFieldAccess(AIdentifierArrayAccessFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAIdentifierArrayAccessFieldAccess(AIdentifierArrayAccessFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierArrayAccessFieldAccess(AIdentifierArrayAccessFieldAccess node)
    {
        inAIdentifierArrayAccessFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAIdentifierArrayAccessFieldAccess(node);
    }

    public void inAIdentifierEmptyArrayAccessFieldAccess(AIdentifierEmptyArrayAccessFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAIdentifierEmptyArrayAccessFieldAccess(AIdentifierEmptyArrayAccessFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierEmptyArrayAccessFieldAccess(AIdentifierEmptyArrayAccessFieldAccess node)
    {
        inAIdentifierEmptyArrayAccessFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAIdentifierEmptyArrayAccessFieldAccess(node);
    }

    public void inAArrayFieldAccessFieldAccess(AArrayFieldAccessFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAArrayFieldAccessFieldAccess(AArrayFieldAccessFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayFieldAccessFieldAccess(AArrayFieldAccessFieldAccess node)
    {
        inAArrayFieldAccessFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAArrayFieldAccessFieldAccess(node);
    }

    public void inAFieldExtensionFieldAccess(AFieldExtensionFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFieldExtensionFieldAccess(AFieldExtensionFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldExtensionFieldAccess(AFieldExtensionFieldAccess node)
    {
        inAFieldExtensionFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldExtensionFieldAccess(node);
    }

    public void inAMethodCallNoArgMethodCall(AMethodCallNoArgMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCallNoArgMethodCall(AMethodCallNoArgMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallNoArgMethodCall(AMethodCallNoArgMethodCall node)
    {
        inAMethodCallNoArgMethodCall(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMethodCallNoArgMethodCall(node);
    }

    public void inAMethodCallWithArgMethodCall(AMethodCallWithArgMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCallWithArgMethodCall(AMethodCallWithArgMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallWithArgMethodCall(AMethodCallWithArgMethodCall node)
    {
        inAMethodCallWithArgMethodCall(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMethodCallWithArgMethodCall(node);
    }

    public void inAMultArgArgs(AMultArgArgs node)
    {
        defaultIn(node);
    }

    public void outAMultArgArgs(AMultArgArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultArgArgs(AMultArgArgs node)
    {
        inAMultArgArgs(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAMultArgArgs(node);
    }

    public void inASingleArgArgs(ASingleArgArgs node)
    {
        defaultIn(node);
    }

    public void outASingleArgArgs(ASingleArgArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArgArgs(ASingleArgArgs node)
    {
        inASingleArgArgs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASingleArgArgs(node);
    }

    public void inAExprAndLogicalExprExpr(AExprAndLogicalExprExpr node)
    {
        defaultIn(node);
    }

    public void outAExprAndLogicalExprExpr(AExprAndLogicalExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAndLogicalExprExpr(AExprAndLogicalExprExpr node)
    {
        inAExprAndLogicalExprExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getLogicalExpr() != null)
        {
            node.getLogicalExpr().apply(this);
        }
        outAExprAndLogicalExprExpr(node);
    }

    public void inAExprOrLogicalExprExpr(AExprOrLogicalExprExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOrLogicalExprExpr(AExprOrLogicalExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOrLogicalExprExpr(AExprOrLogicalExprExpr node)
    {
        inAExprOrLogicalExprExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLogicalExpr() != null)
        {
            node.getLogicalExpr().apply(this);
        }
        outAExprOrLogicalExprExpr(node);
    }

    public void inALogicalExprExpr(ALogicalExprExpr node)
    {
        defaultIn(node);
    }

    public void outALogicalExprExpr(ALogicalExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalExprExpr(ALogicalExprExpr node)
    {
        inALogicalExprExpr(node);
        if(node.getLogicalExpr() != null)
        {
            node.getLogicalExpr().apply(this);
        }
        outALogicalExprExpr(node);
    }

    public void inALessThanLogicalExpr(ALessThanLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outALessThanLogicalExpr(ALessThanLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanLogicalExpr(ALessThanLogicalExpr node)
    {
        inALessThanLogicalExpr(node);
        if(node.getPlusMinusSrc() != null)
        {
            node.getPlusMinusSrc().apply(this);
        }
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        if(node.getPlusMinusTarget() != null)
        {
            node.getPlusMinusTarget().apply(this);
        }
        outALessThanLogicalExpr(node);
    }

    public void inAGreaterThanLogicalExpr(AGreaterThanLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanLogicalExpr(AGreaterThanLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanLogicalExpr(AGreaterThanLogicalExpr node)
    {
        inAGreaterThanLogicalExpr(node);
        if(node.getPlusMinusSrc() != null)
        {
            node.getPlusMinusSrc().apply(this);
        }
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        if(node.getPlusMinusTarget() != null)
        {
            node.getPlusMinusTarget().apply(this);
        }
        outAGreaterThanLogicalExpr(node);
    }

    public void inALessThanOrEqLogicalExpr(ALessThanOrEqLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outALessThanOrEqLogicalExpr(ALessThanOrEqLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanOrEqLogicalExpr(ALessThanOrEqLogicalExpr node)
    {
        inALessThanOrEqLogicalExpr(node);
        if(node.getPlusMinusSrc() != null)
        {
            node.getPlusMinusSrc().apply(this);
        }
        if(node.getLessThanOrEq() != null)
        {
            node.getLessThanOrEq().apply(this);
        }
        if(node.getPlusMinusTarget() != null)
        {
            node.getPlusMinusTarget().apply(this);
        }
        outALessThanOrEqLogicalExpr(node);
    }

    public void inAGreaterThanOrEqLogicalExpr(AGreaterThanOrEqLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanOrEqLogicalExpr(AGreaterThanOrEqLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanOrEqLogicalExpr(AGreaterThanOrEqLogicalExpr node)
    {
        inAGreaterThanOrEqLogicalExpr(node);
        if(node.getPlusMinusSrc() != null)
        {
            node.getPlusMinusSrc().apply(this);
        }
        if(node.getGreaterThanOrEq() != null)
        {
            node.getGreaterThanOrEq().apply(this);
        }
        if(node.getPlusMinusTarget() != null)
        {
            node.getPlusMinusTarget().apply(this);
        }
        outAGreaterThanOrEqLogicalExpr(node);
    }

    public void inAEqualsLogicalExpr(AEqualsLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outAEqualsLogicalExpr(AEqualsLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsLogicalExpr(AEqualsLogicalExpr node)
    {
        inAEqualsLogicalExpr(node);
        if(node.getPlusMinusSrc() != null)
        {
            node.getPlusMinusSrc().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getPlusMinusTarget() != null)
        {
            node.getPlusMinusTarget().apply(this);
        }
        outAEqualsLogicalExpr(node);
    }

    public void inANotEqualsLogicalExpr(ANotEqualsLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outANotEqualsLogicalExpr(ANotEqualsLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsLogicalExpr(ANotEqualsLogicalExpr node)
    {
        inANotEqualsLogicalExpr(node);
        if(node.getPlusMinusSrc() != null)
        {
            node.getPlusMinusSrc().apply(this);
        }
        if(node.getNotEquals() != null)
        {
            node.getNotEquals().apply(this);
        }
        if(node.getPlusMinusTarget() != null)
        {
            node.getPlusMinusTarget().apply(this);
        }
        outANotEqualsLogicalExpr(node);
    }

    public void inAPlusMinusExprLogicalExpr(APlusMinusExprLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusMinusExprLogicalExpr(APlusMinusExprLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusMinusExprLogicalExpr(APlusMinusExprLogicalExpr node)
    {
        inAPlusMinusExprLogicalExpr(node);
        if(node.getPlusMinusExpr() != null)
        {
            node.getPlusMinusExpr().apply(this);
        }
        outAPlusMinusExprLogicalExpr(node);
    }

    public void inAAdditionPlusMinusExpr(AAdditionPlusMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAAdditionPlusMinusExpr(AAdditionPlusMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionPlusMinusExpr(AAdditionPlusMinusExpr node)
    {
        inAAdditionPlusMinusExpr(node);
        if(node.getPlusMinusExprSrc() != null)
        {
            node.getPlusMinusExprSrc().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultDivModTarget() != null)
        {
            node.getMultDivModTarget().apply(this);
        }
        outAAdditionPlusMinusExpr(node);
    }

    public void inASubtractionPlusMinusExpr(ASubtractionPlusMinusExpr node)
    {
        defaultIn(node);
    }

    public void outASubtractionPlusMinusExpr(ASubtractionPlusMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractionPlusMinusExpr(ASubtractionPlusMinusExpr node)
    {
        inASubtractionPlusMinusExpr(node);
        if(node.getPlusMinusExprSrc() != null)
        {
            node.getPlusMinusExprSrc().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultDivModTarget() != null)
        {
            node.getMultDivModTarget().apply(this);
        }
        outASubtractionPlusMinusExpr(node);
    }

    public void inAMultDivModExprPlusMinusExpr(AMultDivModExprPlusMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMultDivModExprPlusMinusExpr(AMultDivModExprPlusMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultDivModExprPlusMinusExpr(AMultDivModExprPlusMinusExpr node)
    {
        inAMultDivModExprPlusMinusExpr(node);
        if(node.getMultDivModExpr() != null)
        {
            node.getMultDivModExpr().apply(this);
        }
        outAMultDivModExprPlusMinusExpr(node);
    }

    public void inAMultiplicationMultDivModExpr(AMultiplicationMultDivModExpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultDivModExpr(AMultiplicationMultDivModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationMultDivModExpr(AMultiplicationMultDivModExpr node)
    {
        inAMultiplicationMultDivModExpr(node);
        if(node.getMultDivModExprSrc() != null)
        {
            node.getMultDivModExprSrc().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getUnitaryTarget() != null)
        {
            node.getUnitaryTarget().apply(this);
        }
        outAMultiplicationMultDivModExpr(node);
    }

    public void inADivisionMultDivModExpr(ADivisionMultDivModExpr node)
    {
        defaultIn(node);
    }

    public void outADivisionMultDivModExpr(ADivisionMultDivModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionMultDivModExpr(ADivisionMultDivModExpr node)
    {
        inADivisionMultDivModExpr(node);
        if(node.getMultDivModExprSrc() != null)
        {
            node.getMultDivModExprSrc().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getUnitaryTarget() != null)
        {
            node.getUnitaryTarget().apply(this);
        }
        outADivisionMultDivModExpr(node);
    }

    public void inAModuloMultDivModExpr(AModuloMultDivModExpr node)
    {
        defaultIn(node);
    }

    public void outAModuloMultDivModExpr(AModuloMultDivModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloMultDivModExpr(AModuloMultDivModExpr node)
    {
        inAModuloMultDivModExpr(node);
        if(node.getMultDivModExprSrc() != null)
        {
            node.getMultDivModExprSrc().apply(this);
        }
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        if(node.getUnitaryTarget() != null)
        {
            node.getUnitaryTarget().apply(this);
        }
        outAModuloMultDivModExpr(node);
    }

    public void inAUnitaryExprMultDivModExpr(AUnitaryExprMultDivModExpr node)
    {
        defaultIn(node);
    }

    public void outAUnitaryExprMultDivModExpr(AUnitaryExprMultDivModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnitaryExprMultDivModExpr(AUnitaryExprMultDivModExpr node)
    {
        inAUnitaryExprMultDivModExpr(node);
        if(node.getUnitaryExpr() != null)
        {
            node.getUnitaryExpr().apply(this);
        }
        outAUnitaryExprMultDivModExpr(node);
    }

    public void inAUnaryNotUnitaryExpr(AUnaryNotUnitaryExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryNotUnitaryExpr(AUnaryNotUnitaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryNotUnitaryExpr(AUnaryNotUnitaryExpr node)
    {
        inAUnaryNotUnitaryExpr(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getUnitaryExpr() != null)
        {
            node.getUnitaryExpr().apply(this);
        }
        outAUnaryNotUnitaryExpr(node);
    }

    public void inAUnaryPlusUnitaryExpr(AUnaryPlusUnitaryExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryPlusUnitaryExpr(AUnaryPlusUnitaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryPlusUnitaryExpr(AUnaryPlusUnitaryExpr node)
    {
        inAUnaryPlusUnitaryExpr(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getUnitaryExpr() != null)
        {
            node.getUnitaryExpr().apply(this);
        }
        outAUnaryPlusUnitaryExpr(node);
    }

    public void inAUnaryMinusUnitaryExpr(AUnaryMinusUnitaryExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryMinusUnitaryExpr(AUnaryMinusUnitaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryMinusUnitaryExpr(AUnaryMinusUnitaryExpr node)
    {
        inAUnaryMinusUnitaryExpr(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getUnitaryExpr() != null)
        {
            node.getUnitaryExpr().apply(this);
        }
        outAUnaryMinusUnitaryExpr(node);
    }

    public void inAPrimaryUnitaryExpr(APrimaryUnitaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPrimaryUnitaryExpr(APrimaryUnitaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryUnitaryExpr(APrimaryUnitaryExpr node)
    {
        inAPrimaryUnitaryExpr(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryUnitaryExpr(node);
    }

    public void inAPrimaryFieldPrimary(APrimaryFieldPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFieldPrimary(APrimaryFieldPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFieldPrimary(APrimaryFieldPrimary node)
    {
        inAPrimaryFieldPrimary(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAPrimaryFieldPrimary(node);
    }

    public void inAPrimaryMethodCallPrimary(APrimaryMethodCallPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMethodCallPrimary(APrimaryMethodCallPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMethodCallPrimary(APrimaryMethodCallPrimary node)
    {
        inAPrimaryMethodCallPrimary(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAPrimaryMethodCallPrimary(node);
    }

    public void inAPrimaryIntegerLiteralPrimary(APrimaryIntegerLiteralPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryIntegerLiteralPrimary(APrimaryIntegerLiteralPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryIntegerLiteralPrimary(APrimaryIntegerLiteralPrimary node)
    {
        inAPrimaryIntegerLiteralPrimary(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAPrimaryIntegerLiteralPrimary(node);
    }

    public void inAPrimaryCharLiteralPrimary(APrimaryCharLiteralPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryCharLiteralPrimary(APrimaryCharLiteralPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryCharLiteralPrimary(APrimaryCharLiteralPrimary node)
    {
        inAPrimaryCharLiteralPrimary(node);
        if(node.getCharLiteral() != null)
        {
            node.getCharLiteral().apply(this);
        }
        outAPrimaryCharLiteralPrimary(node);
    }

    public void inAPrimaryStringLiteralPrimary(APrimaryStringLiteralPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryStringLiteralPrimary(APrimaryStringLiteralPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryStringLiteralPrimary(APrimaryStringLiteralPrimary node)
    {
        inAPrimaryStringLiteralPrimary(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAPrimaryStringLiteralPrimary(node);
    }

    public void inAPrimaryFloatLiteralPrimary(APrimaryFloatLiteralPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFloatLiteralPrimary(APrimaryFloatLiteralPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFloatLiteralPrimary(APrimaryFloatLiteralPrimary node)
    {
        inAPrimaryFloatLiteralPrimary(node);
        if(node.getFloatLit() != null)
        {
            node.getFloatLit().apply(this);
        }
        outAPrimaryFloatLiteralPrimary(node);
    }

    public void inAPrimaryTruePrimary(APrimaryTruePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryTruePrimary(APrimaryTruePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryTruePrimary(APrimaryTruePrimary node)
    {
        inAPrimaryTruePrimary(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outAPrimaryTruePrimary(node);
    }

    public void inAPrimaryFalsePrimary(APrimaryFalsePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFalsePrimary(APrimaryFalsePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFalsePrimary(APrimaryFalsePrimary node)
    {
        inAPrimaryFalsePrimary(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAPrimaryFalsePrimary(node);
    }

    public void inAPrimaryExprPrimary(APrimaryExprPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExprPrimary(APrimaryExprPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryExprPrimary(APrimaryExprPrimary node)
    {
        inAPrimaryExprPrimary(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPrimaryExprPrimary(node);
    }

    public void inAIntegerLiteralIntegerParamOrValue(AIntegerLiteralIntegerParamOrValue node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteralIntegerParamOrValue(AIntegerLiteralIntegerParamOrValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteralIntegerParamOrValue(AIntegerLiteralIntegerParamOrValue node)
    {
        inAIntegerLiteralIntegerParamOrValue(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteralIntegerParamOrValue(node);
    }

    public void inAIdentifierIntegerParamOrValue(AIdentifierIntegerParamOrValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIntegerParamOrValue(AIdentifierIntegerParamOrValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierIntegerParamOrValue(AIdentifierIntegerParamOrValue node)
    {
        inAIdentifierIntegerParamOrValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierIntegerParamOrValue(node);
    }
}
