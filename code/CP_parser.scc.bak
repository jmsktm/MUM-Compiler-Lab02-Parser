Helpers
    all = [0..0xffff];
    space  = ' ';          
    lf  = 0x000a; // line feed
    cr  = 0x000d; // carriage return
    ff  = 0x000c; // form feed
    ht  = 0x0009; // tab

    eol = cr | lf | cr lf;
    not_eol = [all - [cr + lf]];
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];

    valid_string_literal_chars = [not_eol - '"'];

    simple_char_seq = ' ' | '!' | '"' | '#' | '$' | '%' | '&' | '(' | ')' 
        | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' 
        | '?' | '@' | '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~'
        | ['a' .. 'z'] | ['A' .. 'Z'] | ['0' .. '9'];
    simple_escape_seq = '\\' | '\' ''' | '\n' | '\t' | '\r' | '\b' | '\f' | '\"' ;

    digit = ['0' .. '9'];
    non_zero_digit = [digit - '0'];
    digit_sequence = digit+;

    decimal = '.';
    sign = '+' | '-';
    float_mandatory_prefix_num = digit+ decimal digit*;
    float_mandatory_suffix_num = digit* decimal digit+;
    exponent_part = ('e' | 'E') sign? digit_sequence;

    underscore = '_';
    lower_alpha = ['a' .. 'z'];
    upper_alpha = ['A' .. 'Z'];
    numeric = ['0' .. '9'];
    alpha = [lower_alpha + upper_alpha];
    alpha_numeric = [alpha + numeric];
    alpha_underscore = [alpha + underscore];
    alpha_numeric_underscore = [alpha_numeric + underscore];

States
    normal;

Tokens
    comment = 
        ('//' not_eol* eol) |
        ('/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/');

    string_literal = ('"' valid_string_literal_chars* '"');
    char_literal = (''' simple_char_seq ''');
    escape_string_literal = ('"' (simple_escape_seq | valid_string_literal_chars)* '"');

    escape = (''' simple_escape_seq ''');

    plus = '+';
    minus = '-';
    mult = '*';
    div = '/';
    less_than = '<';
    less_than_or_eq= '<=';
    greater_than = '>';
    greater_than_or_eq = '>=';
    equals = '==';
    and = '&&';
    or = '||';
    not = '!';
    colon = ':';
    semicolon = ';';
    comma = ',';
    l_par = '(';
    r_par= ')';
    l_brace = '{';
    r_brace = '}';
    l_bkt= '[';
    r_bkt= ']';
    not_equals = '!=';
    equal_to = '=';
    pointer = '->';
    dot = '.';
    modulo = '%';

    float_lit = ((float_mandatory_prefix_num  | float_mandatory_suffix_num) exponent_part?);

    white_space = (space | ht | ff | eol)*;

    bool = 'bool';
    break = 'break';
    char = 'char';
    const = 'const';
    continue = 'continue';
    kclass = 'class';
    do = 'do';
    else = 'else';
    false = 'false';
    float = 'float';
    if = 'if';
    int = 'int';
    new = 'new';
    null = 'null';
    private = 'private';
    protected = 'protected';
    public = 'public';
    return = 'return';
    static = 'static';
    string = 'string';
    struct = 'struct';
    this = 'this';
    true = 'true';
    while = 'while';
    void = 'void';

    integer_literal = (non_zero_digit digit*);
    identifier = (alpha_underscore alpha_numeric_underscore*);
